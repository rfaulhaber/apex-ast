// apex

apex_file = { SOI ~ (class_declaration | interface_declaration | trigger_declaration) ~ EOI }

class_declaration = { annotation? ~ access_modifier? ~ class_impl_or_sharing_modifier? ~ CLASS ~ identifier ~ (IMPLEMENTS ~ type_list)? ~ (EXTENDS ~ basic_type)? ~ class_body }
class_body = { "{" ~ (inner_class_declaration | interface_declaration | class_method_declaration | enum_declaration | class_field_declaration | static_block | instance_block | class_constructor_definition)* ~ "}" }
inner_class_declaration = { access_modifier? ~ class_impl_or_sharing_modifier? ~ CLASS ~ identifier ~ (EXTENDS ~ basic_type)? ~ (IMPLEMENTS ~ type_list)? ~ inner_class_body }
inner_class_body = { "{" ~ (class_method_declaration | enum_declaration | class_field_declaration | class_constructor_definition | static_block | instance_block)* ~ "}" }
// basically methods without return type 
class_constructor_definition = { annotation? ~ access_modifier? ~ identifier ~ parameter_list ~ block }

class_impl_or_sharing_modifier = {
	ABSTRACT
	| VIRTUAL
    | WITHOUT_SHARING
    | WITH_SHARING
    | INHERITED_SHARING
}

// interface declaration
interface_declaration = { access_modifier? ~ VIRTUAL? ~ INTERFACE ~ identifier ~ (EXTENDS ~ type_list)? ~ interface_body }
interface_body = { "{" ~ interface_method_declaration* ~ "}" }
interface_method_declaration = { basic_type ~ identifier ~ parameter_list ~ ";" }

type_list = { basic_type ~ ("," ~ basic_type)* }

// triggers
trigger_declaration = { TRIGGER ~ identifier ~ ON ~ basic_type ~ trigger_event_list ~ block }
trigger_event_list = { "(" ~ trigger_event ~ ("," ~ trigger_event)* ~ ")" }
trigger_event = { (BEFORE ~ dml_action) | (AFTER ~ dml_action) }

// enums
enum_declaration = { annotation? ~ access_modifier? ~ ENUM ~ identifier ~ enum_body  }
enum_body = { "{" ~ identifier ~ ("," ~ identifier)* ~ "}" }

// annotations

annotation = { "@" ~ identifier ~ annotation_pair_list? }
annotation_pair_list = _{ "(" ~ annotation_pair+ ~ ")" }

// we're making it easy on ourselves! apex annotations aren't complex!
annotation_pair = { identifier ~ "=" ~ literal }


// non-method class members

class_field_declaration = { 
    annotation? 
    ~ access_modifier? 
    ~ instance_modifier? 
    ~ FINAL? 
    ~ basic_type 
    ~ identifier 
	~ (class_field_accessors | declaration_rhs ~ ";" | ";")
}

instance_modifier = { STATIC | TRANSIENT }

class_field_accessors = { "{" ~ class_field_accessor{1, 2} ~ "}" }
class_field_accessor = { access_modifier? ~ (GET | SET) ~ (";" | block) }

// static blocks
static_block = { STATIC ~ block }

// instance block
instance_block = { block }

// methods

access_modifier = { GLOBAL | PUBLIC | PROTECTED | PRIVATE }
impl_modifier = { OVERRIDE | STATIC | VIRTUAL | ABSTRACT }

parameter_list = { "(" ~ (parameter ~ ("," ~ parameter)*)? ~ ")" }
parameter = { basic_type ~ identifier }
// this can be a concrete class method or an abstract method, hence why block is optional
class_method_declaration = { annotation? ~ access_modifier? ~ impl_modifier? ~ TESTMETHOD? ~ basic_type ~ identifier ~ parameter_list ~ (block | ";") }

block = { "{" ~ statement* ~ "}" }
inline_block = { !block ~ statement }

// statements

statement = {
    for_stmt
    | do_while_stmt
    | while_stmt
    | if_stmt
    | switch_stmt
    | try_catch_stmt
	| block
    | return_stmt
	| dml_stmt
    | throw_stmt
    | break_stmt
    | continue_stmt
    | stmt_expr ~ ";"
}

// if statements
if_stmt = { IF ~ if_condition ~ (inline_block | block) ~ else_if_block* ~ else_block? }
if_condition = { "(" ~ expression ~ ")" }
else_if_block = { ELSE ~ IF ~ if_condition ~ (inline_block | block) }
else_block = { ELSE ~ (inline_block | block) }

// switch statements
switch_stmt = { SWITCH ~ ON ~ expression ~ "{" ~ when_case* ~ when_else? ~ "}" }
when_case = { WHEN ~ when_condition ~ block }
when_condition = { when_type | when_value_list }
when_type = { basic_type ~ identifier }
// a hack to get around the fact that "else" could be interpreted as an identifier
when_value_list = { literal ~ ("," ~ literal)* | !ELSE ~ identifier ~ ("," ~ identifier)* }
when_else = { WHEN ~ ELSE ~ block }

// for statements
// these names come to us courtesy of java as well
for_stmt = { for_basic | for_enhanced }

// "basic" for loops. 
// infinite for loops are allowed in apex.
// by means of experimentation, apex doesn't allow for multiple statement 
// expressions in the update term, leading to this unusual rule.
for_basic = { FOR ~ "(" ~ for_init? ~ ";" ~ expression? ~ ";" ~ stmt_expr? ~ ")" ~ (inline_block | block) }
for_init = { stmt_expr ~ ("," ~ stmt_expr)* }

// "enhanced" for loop
for_enhanced = { FOR ~ "(" ~ basic_type ~ identifier ~ ":" ~ expression ~ ")" ~ (inline_block | block) }

// while statements
while_stmt = { WHILE ~ "(" ~ expression ~ ")" ~ (inline_block | block) }

// do while statements
do_while_stmt = { DO ~ (inline_block | block) ~ WHILE ~ "(" ~ expression ~ ")" ~ ";" }

// try / catch blocks
try_catch_stmt = { TRY ~ block ~ catch_clause+ ~ (FINALLY ~ block)? }
catch_clause = { CATCH ~ "(" ~ basic_type ~ identifier ~ ")" ~ block }

// return statements
return_stmt = { RETURN ~ expression? ~ ";" }

// throw statements
// TODO technically shouldn't this only throw identifer, new inst, or null? 
// see: https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.18
throw_stmt = { THROW ~ expression ~ ";"  }

// break statements
break_stmt = { BREAK ~ ";" }

// continue statements
continue_stmt = { CONTINUE ~ ";"  }

// dml statements
dml_stmt = { dml_action ~ (new_instance_expr | identifier) ~ ";" }
dml_action = { INSERT | UPDATE | UPSERT | DELETE | UNDELETE | MERGE }

local_variable_declaration = { annotation? ~ FINAL? ~ basic_type ~ identifier ~ declaration_rhs? }
declaration_rhs = _{ "=" ~ expression }


// TODO write grammar for soql and sosl, this is incomplete
// queries are expressions, not statements
query_expression = { "[" ~ (SELECT | FIND) ~ query_body ~ "]" }
query_body = @{ (!"]" ~ ANY)* }

// statement expressions. these are expressions that can stand alone as
// statements themselves. for example, "i++" is an expression until you add a
// semicolon, making "i++;" a statement.
stmt_expr = { 
    local_variable_declaration
    | assignment_expr 
    | property_access
    | prefix_expr 
    | postfix_expr 
    | method_call 
    | new_instance_expr
}

// expressions 

expression = { infix_expr | ternary_expr | assignment_expr | expr_inner }

// these are supposed to be "terminal" expressions, to avoid left-recursion 
expr_inner = {
    braced_expr
    | property_access
    | query_expression
    | list_access
    | new_instance_expr
    | method_call
    | unary_expr
    | prefix_expr
    | postfix_expr
    | instanceof_expr
    | cast_expression
    | primary
}


braced_expr = { !cast_operator ~ "(" ~ expression ~ ")" }
ternary_expr = { (infix_expr | expr_inner) ~ "?" ~ expression ~ ":" ~ expression }
// infix_expr is right-recursive, so 1 + 2 + 3 is actually 1 + (2 + 3)
infix_expr = { expr_inner ~ binary_operator ~ expression }
assignment_expr = { expr_inner ~ assignment_operator ~ expression }
unary_expr = { unary_operator  ~ expression }
prefix_expr = { (INC_OP | DEC_OP) ~ affixable }
postfix_expr = { affixable ~ (INC_OP | DEC_OP) }
affixable = { property_access | list_access | identifier }

// technically, something like "1 instanceof Integer" is apparently syntactically
// correct but Salesforce throws a compile-time error rather than a parsing error
instanceof_expr = { identifier ~ INSTANCEOF ~ basic_type }

// TODO make method calls distinct from property access
property_access = { (list_access | access_partial) ~ "." ~ !CLASS ~ (property_access | list_access | method_call | identifier) }
list_access = { access_partial ~ "[" ~ expression ~ "]" }

cast_expression = { cast_operator ~ expression }
cast_operator = _{ "(" ~ basic_type ~ ")" }

access_partial = _{
    cast_expression
    | new_instance_expr
    | query_expression
    | SUPER ~ super_suffix
    | method_call
    | THIS
    | identifier
}

// this name comes to us courtesy of java
primary = {
    THIS ~ arguments?
    | SUPER ~ super_suffix
    | type_expr
    | literal
    | identifier
}

super_suffix = { arguments | "." ~ identifier ~ arguments }

method_call = { 
    identifier ~ arguments
    | THIS ~ arguments?
    | SUPER ~ arguments?
}

new_instance_expr = { NEW ~ (map_literal_init | collection_literal_init | array_literal_init | new_class) }

map_literal_init = { map_type ~ two_type_arguments ~ (map_literal_values | arguments) }
map_type = { ^"MAP" }
map_literal_values = { "{" ~ mapping_pair ~ ("," ~ mapping_pair)* ~ "}" }
mapping_pair = { expression ~ "=>" ~ expression }

array_literal_init = { basic_type ~ new_array_literal }
new_array_literal = { "[" ~ expression ~ ("," ~ expression)* ~ "]" }
collection_literal_init = { collection_type ~ one_type_argument ~ (new_collection_literal | arguments) }
collection_type = { ^"LIST" | ^"SET" }
new_collection_literal = { "{" ~ (expression ~ ("," ~ expression)*)? ~ "}" }

new_class = { basic_type ~ (sobject_arguments | arguments) }

arguments = { "(" ~ argument_list? ~ ")" } 
argument_list = _{ expression ~ ("," ~ expression)* }

sobject_arguments = { "(" ~ sobject_argument_list ~ ")" }
sobject_argument_list = _{ sobject_argument_pair ~ ("," ~ sobject_argument_pair)* }
sobject_argument_pair = { identifier ~ "=" ~ expression }

type_expr = { basic_type ~ "." ~ CLASS }

// TODO add "| VOID"
basic_type = { (primitive_type | class_or_interface_type) ~ array_brackets? }
array_brackets = @{ "[]" }

class_or_interface_type = { identifier ~ ("." ~ !CLASS ~ identifier)? ~ type_arguments? }

// apex only has typed types of up to two types.
// Map<String, String> => two types
// List<String> => one type
type_arguments = { two_type_arguments | one_type_argument }

two_type_arguments = { "<" ~ basic_type ~ "," ~ basic_type ~ ">" }
one_type_argument = { "<" ~ basic_type ~ ">" }

qualified_name = { identifier ~ ("." ~ identifier)* }

// "primitive"
primitive_type = {
    BLOB
    | BOOLEAN
    | DATE
    | DATETIME
    | DECIMAL
    | DOUBLE
    | ID
    | INTEGER
    | LONG
    | OBJECT
    | STRING
    | TIME
}

// soql keywords - not inclusive at the moment
FROM = { ^"FROM" }
HAVING = { ^"HAVING" }
LIMIT = { ^"LIMIT" }
OFFSET = { ^"OFFSET" }
SELECT = { ^"SELECT" }
WHERE = { ^"WHERE" }

// sosl keywords - not inclusive at the moment
FIND = { ^"FIND" }

literal = {
    float_literal
    | long_literal
    | integer_literal
    | string_literal
    | bool_literal
    | null_literal
}

long_literal = @{ integer_literal ~ ^"L" }
integer_literal = @{ "0" | "-"? ~ ASCII_NONZERO_DIGIT ~ (ASCII_DIGIT | "_")* }
float_literal = @{ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT* | "." ~ ASCII_DIGIT* }

bool_literal = { TRUE | FALSE }

string_literal = @{ "'" ~ string_inner ~ "'" }
string_inner = @{ char* }
char = { !("\'" | "\\") ~ ANY | escape_sequence }

null_literal = { ^"null" }

// TODO how do I write this such that it doesn't match apex keywords?
// "voids" should be a valid identifier, while "void" shouldn't be
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

escape_sequence = {
    "\\" ~ ("\\" |"b" | "f" | "n" | "t" | "r" | "'")
    | "\\" ~ ('0' .. '3')? ~ ('0' .. '7')? ~ ('0' .. '7')
    | "\\" ~ "u" ~ ASCII_HEX_DIGIT{4}
}

BLOB = { ^"Blob" }
BOOLEAN = { ^"Boolean" }
DATE = { ^"Date" }
DATETIME = { ^"Datetime" }
DECIMAL = { ^"Decimal" }
DOUBLE = { ^"Double" }
ID = { ^"ID" }
INTEGER = { ^"Integer" }
LONG = { ^"Long" }
OBJECT = { ^"Object" }
STRING = { ^"String" } 
TIME = { ^"Time" }

assignment_operator = _{
    ASSIGNMENT
    | ADD_ASSIGN
    | SUB_ASSIGN
    | MUL_ASSIGN
    | DIV_ASSIGN
    | AND_ASSIGN
    | OR_ASSIGN
    | XOR_ASSIGN
    | LEFT_SHIFT_ASSIGN
    | RIGHT_SHIFT_ASSIGN
}

ASSIGNMENT = { "=" }

binary_operator = _{
    LOGIC_AND
    | LOGIC_OR
    | GE
    | LE
    | EQ
    | NOT_EQ
    | BIT_SHIFT_LEFT
    | BIT_SHIFT_RIGHT
    | GT
    | LT
    | ADD
    | SUB
    | MUL
    | DIV
    | BIT_AND
    | BIT_OR
    | BIT_XOR
}

unary_operator = {
    LOGIC_NOT
    | BIT_NOT
}

INC_OP = { "++" }
DEC_OP = { "--" }

LOGIC_AND = { "&&" }
LOGIC_OR = { "||" }
LOGIC_NOT = { "!" }

GE = { ">=" }
GT = { ">" }
LE = { "<=" }
LT = { "<" }
EQ = { "==" }
NOT_EQ = { "!=" }

ADD = { "+" }
SUB = { "-" }
MUL = { "*" }
DIV = { "/" }

ADD_ASSIGN = { "+=" }
SUB_ASSIGN = { "-=" }
MUL_ASSIGN = { "*=" }
DIV_ASSIGN = { "/=" }
AND_ASSIGN = { "&=" }
OR_ASSIGN = { "|=" }
XOR_ASSIGN = { "^=" }
LEFT_SHIFT_ASSIGN = { "<<=" }
RIGHT_SHIFT_ASSIGN = { ">>=" }
URSHIFT_ASSIGN = { ">>>=" }

BIT_AND = { "&" }
BIT_OR = { "|" }
BIT_XOR = { "^" }
BIT_NOT = { "~" }
BIT_SHIFT_LEFT = { "<<" }
BIT_SHIFT_RIGHT = { ">>" }

// apex keywords convenience rule
apex_keyword = _{
    ABSTRACT
    | BOOLEAN
    | BREAK
    | CATCH
    | CLASS
    | CONTINUE
    | DEFAULT
    | DO
    | ELSE
    | ENUM
    | EXTENDS
    | FALSE
    | FINALLY
    | FINAL
    | FOR
    | GET
    | GLOBAL
    | IF
    | IMPLEMENTS
    | INHERITED_SHARING
    | INSTANCEOF
    | INTERFACE
    | NEW
    | OVERRIDE
    | PRIVATE
    | PROTECTED
    | PUBLIC
    | RETURN
    | SET
    | STATIC
    | SUPER
    | THIS
    | THROW
    | TRANSIENT
    | TRUE
    | TRY
    | VIRTUAL
    | VOID
    | WHILE
    | WITHOUT_SHARING
    | WITH_SHARING
}

// apex keywords
ABSTRACT = { ^"abstract" }
AFTER = { ^"after" }
BEFORE = { ^"before" }
BREAK = { ^"break" }
CATCH = { ^"catch" }
CLASS = { ^"class" }
CONTINUE = { ^"continue" }
DEFAULT = { ^"default" }
DELETE = { ^"delete" }
DO = { ^"do" }
ELSE = { ^"else" }
ENUM = { ^"enum" }
EXTENDS = { ^"extends" }
FALSE = { ^"false" }
FINAL = { ^"final" }
FINALLY = { ^"finally" }
FOR = { ^"for" }
GET = { ^"get" }
GLOBAL = { ^"global" }
IF = { ^"if" }
IMPLEMENTS = { ^"implements" }
INHERITED_SHARING = { ^"inherited sharing" }
INSERT = { ^"insert" }
INSTANCEOF = { ^"instanceof" }
INTERFACE = { ^"interface" }
MERGE = { ^"merge" }
NEW = { ^"new" }
NULL = { ^"null" }
ON = { ^"on" }
OVERRIDE = { ^"override" }
PRIVATE = { ^"private" }
PROTECTED = { ^"protected" }
PUBLIC = { ^"public" }
RETURN = { ^"return" }
SET = { ^"set" }  
STATIC = { ^"static" }
SUPER = { ^"super" }
SWITCH = { ^"switch" }
TESTMETHOD = { ^"testMethod" }
THIS = { ^"this" }
THROW = { ^"throw" }
TRANSIENT = { ^"transient" }
TRIGGER = { ^"trigger" }
TRUE = { ^"true" }
TRY = { ^"try" }
UNDELETE = { ^"undelete" }
UPDATE = { ^"update" }
UPSERT = { ^"upsert" }
VIRTUAL = { ^"virtual" }
VOID = { ^"void" }
WHEN = {^"when"}
WHILE = { ^"while" }
WITHOUT_SHARING = { ^"without sharing" }
WITH_SHARING = { ^"with sharing" }

WHITESPACE = _{ (" " | "\t" | "\r" | "\n")+ }
COMMENT = _{ comment_block | comment_line }
comment_block = @{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
comment_line = @{ "//" ~ (!NEWLINE ~ ANY)* }